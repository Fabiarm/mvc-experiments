using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using Mvc.Experiments.Domain.Interfaces;
using Mvc.Experiments.Domain.Services;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.IO;
using System.Reflection;

namespace Mvc.Experiments.Api.Extensions
{
    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddBusinessServices(this IServiceCollection services)
        {
            services.AddScoped<ITestService, TestService>();
            return services;
        }
        public static IServiceCollection AddApiVersioningSettings(this IServiceCollection services, IConfigSettings configSettings)
        {
            if (configSettings.Swagger.EnableSwagger == true)
            {
                if (configSettings.Swagger.EnableAutogenerateFile == false)
                {
                    services.AddVersionedApiExplorer(options =>
            {
                options.SubstituteApiVersionInUrl = true;
            });
                    services.AddApiVersioning(v =>
                    {
                        v.ReportApiVersions = true;
                        v.AssumeDefaultVersionWhenUnspecified = true;
                        v.DefaultApiVersion = ApiVersion.Default;
                    });
                }
            }
            return services;
        }

        public static IServiceCollection AddSwaggerConfiguration(this IServiceCollection services, IConfigSettings configSettings, int mayorVersion)
        {
            if (configSettings.Swagger.EnableSwagger == true)
            {
                if (configSettings.Swagger.EnableAutogenerateFile == true)
                {
                    services.AddSwaggerGen(options =>
                    {
                        options.SwaggerDoc("v1", new OpenApiInfo
                        {
                            Title = "Title (autogenerated)",
                            Version = $"v{mayorVersion}",
                            Description = "Description (autogenerated)"
                        });
                        options.IncludeApiXmlComments();
                    });
                   
                }
                else
                {
                    services.AddSwaggerGen(options =>
                    {
                        options.IncludeApiXmlComments();
                    });
                }
            }
            return services;
        }

        private static SwaggerGenOptions IncludeApiXmlComments(this SwaggerGenOptions options)
        {
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
            options.IncludeXmlComments(xmlPath);
            return options;
        }
    }
}
