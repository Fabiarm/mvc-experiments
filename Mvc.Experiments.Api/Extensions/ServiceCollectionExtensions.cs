using System;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using Mvc.Experiments.Domain.Interfaces;
using Mvc.Experiments.Domain.Services;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Mvc.Experiments.Api.Extensions
{
    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddBusinessServices(this IServiceCollection services)
        {
            services.AddScoped<ITestService, TestService>();
            return services;
        }

        public static IServiceCollection AddApiVersioningSettings(this IServiceCollection services, IConfigSettings configSettings)
        {
            if (configSettings.Swagger.EnableSwagger == true)
            {
                services.AddVersionedApiExplorer(options => options.GroupNameFormat = "'v'VVV");
                services.AddApiVersioning();
                services.AddApiVersioning(options =>
                {
                    options.ReportApiVersions = true;
                    options.AssumeDefaultVersionWhenUnspecified = true;
                    options.ApiVersionReader = new UrlSegmentApiVersionReader();
                    options.DefaultApiVersion = new ApiVersion(1, 0);
                });
            }
            return services;
        }

        public static IServiceCollection AddSwaggerConfiguration(this IServiceCollection services, IConfigSettings configSettings)
        {
            if (configSettings.Swagger.EnableSwagger == true)
            {
                if (configSettings.Swagger.EnableAutogenerateFile == true)
                {
                    services.AddSwaggerGen(options =>
                    {
                        options.SwaggerDoc("v1", new OpenApiInfo
                        {
                            Title = "Title (autogenerated) v1",
                            Version = $"v1",
                            Description = "Description (autogenerated) v1"
                        });
                        options.SwaggerDoc("v2", new OpenApiInfo
                        {
                            Title = "Title (autogenerated) v2",
                            Version = $"v2",
                            Description = "Description (autogenerated) v2"
                        });
                        options.IncludeApiXmlComments();
                    });
                   
                }
                else
                {
                    services.AddSwaggerGen(options =>
                    {
                        options.IncludeApiXmlComments();
                    });
                }
            }
            return services;
        }

        private static SwaggerGenOptions IncludeApiXmlComments(this SwaggerGenOptions options)
        {
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
            options.IncludeXmlComments(xmlPath);
            return options;
        }
    }
}
